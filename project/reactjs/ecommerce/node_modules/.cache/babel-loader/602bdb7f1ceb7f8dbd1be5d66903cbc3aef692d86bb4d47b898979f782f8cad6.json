{"ast":null,"code":"'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport { getProxyForUrl } from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport { VERSION } from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport EventEmitter from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\nimport callbackify from \"../helpers/callbackify.js\";\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n};\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\nconst {\n  http: httpFollow,\n  https: httpsFollow\n} = followRedirects;\nconst isHttps = /https:?/;\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost;\n    // Replace 'host' since options is not a URL object\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n\n// temporary hotfix\n\nconst wrapAsync = asyncExecutor => {\n  return new Promise((resolve, reject) => {\n    let onDone;\n    let isDone;\n    const done = (value, isRejected) => {\n      if (isDone) return;\n      isDone = true;\n      onDone && onDone(value, isRejected);\n    };\n    const _resolve = value => {\n      done(value);\n      resolve(value);\n    };\n    const _reject = reason => {\n      done(reason, true);\n      reject(reason);\n    };\n    asyncExecutor(_resolve, _reject, onDoneHandler => onDone = onDoneHandler).catch(_reject);\n  });\n};\n\n/*eslint consistent-return:0*/\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {\n    let {\n      data,\n      lookup,\n      family\n    } = config;\n    const {\n      responseType,\n      responseEncoding\n    } = config;\n    const method = config.method.toUpperCase();\n    let isDone;\n    let rejected = false;\n    let req;\n    if (lookup && utils.isAsyncFn(lookup)) {\n      lookup = callbackify(lookup, entry => {\n        if (utils.isString(entry)) {\n          entry = [entry, entry.indexOf('.') < 0 ? 6 : 4];\n        } else if (!utils.isArray(entry)) {\n          throw new TypeError('lookup async function must return an array [ip: string, family: number]]');\n        }\n        return entry;\n      });\n    }\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n    const onFinished = () => {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n      emitter.removeAllListeners();\n    };\n    onDone((value, isRejected) => {\n      isDone = true;\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n    });\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n    emitter.once('abort', reject);\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, 'http://localhost');\n    const protocol = parsed.protocol || supportedProtocols[0];\n    if (protocol === 'data:') {\n      let convertedData;\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n    }\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n    const onDownloadProgress = config.onDownloadProgress;\n    const onUploadProgress = config.onUploadProgress;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for spec compliant FormData objects\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n      data = formDataToStream(data, formHeaders => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      });\n      // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {}\n      }\n    } else if (utils.isBlob(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n      }\n\n      // Add Content-Length header if data exists\n      headers.setContentLength(data.length, false);\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n      }\n    }\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {\n          objectMode: false\n        });\n      }\n      data = stream.pipeline([data, new AxiosTransformStream({\n        length: contentLength,\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n      onUploadProgress && data.on('progress', progress => {\n        onUploadProgress(Object.assign(progress, {\n          upload: true\n        }));\n      });\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n    auth && headers.delete('authorization');\n    let path;\n    try {\n      path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n    headers.set('Accept-Encoding', 'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false);\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: {\n        http: config.httpAgent,\n        https: config.httpsAgent\n      },\n      auth,\n      protocol,\n      family,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    // cacheable-lookup integration hotfix\n    !utils.isUndefined(lookup) && (options.lookup = lookup);\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n      const streams = [res];\n      const responseLength = +res.headers['content-length'];\n      if (onDownloadProgress) {\n        const transformStream = new AxiosTransformStream({\n          length: utils.toFiniteNumber(responseLength),\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n        onDownloadProgress && transformStream.on('progress', progress => {\n          onDownloadProgress(Object.assign(progress, {\n            download: true\n          }));\n        });\n        streams.push(transformStream);\n      }\n\n      // decompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n        switch (res.headers['content-encoding']) {\n          /*eslint default-case:0*/\n          case 'gzip':\n          case 'x-gzip':\n          case 'compress':\n          case 'x-compress':\n            // add the unzipper to the body stream processing pipeline\n            streams.push(zlib.createUnzip(zlibOptions));\n\n            // remove the content-encoding in order to not confuse downstream operations\n            delete res.headers['content-encoding'];\n            break;\n          case 'deflate':\n            streams.push(new ZlibHeaderTransformStream());\n\n            // add the unzipper to the body stream processing pipeline\n            streams.push(zlib.createUnzip(zlibOptions));\n\n            // remove the content-encoding in order to not confuse downstream operations\n            delete res.headers['content-encoding'];\n            break;\n          case 'br':\n            if (isBrotliSupported) {\n              streams.push(zlib.createBrotliDecompress(brotliOptions));\n              delete res.headers['content-encoding'];\n            }\n        }\n      }\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n          const err = new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest);\n          responseStream.destroy(err);\n          reject(err);\n        });\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n      if (isNaN(timeout)) {\n        reject(new AxiosError('error trying to parse `config.timeout` to int', AxiosError.ERR_BAD_OPTION_VALUE, config, req));\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));\n        abort();\n      });\n    }\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n      data.on('end', () => {\n        ended = true;\n      });\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n};\nexport const __setProxy = setProxy;","map":{"version":3,"names":["utils","settle","buildFullPath","buildURL","getProxyForUrl","http","https","util","followRedirects","zlib","VERSION","transitionalDefaults","AxiosError","CanceledError","platform","fromDataURI","stream","AxiosHeaders","AxiosTransformStream","EventEmitter","formDataToStream","readBlob","ZlibHeaderTransformStream","callbackify","zlibOptions","flush","constants","Z_SYNC_FLUSH","finishFlush","brotliOptions","BROTLI_OPERATION_FLUSH","isBrotliSupported","isFunction","createBrotliDecompress","httpFollow","httpsFollow","isHttps","supportedProtocols","protocols","map","protocol","dispatchBeforeRedirect","options","beforeRedirects","proxy","config","setProxy","configProxy","location","proxyUrl","URL","username","auth","password","base64","Buffer","from","toString","headers","host","hostname","port","proxyHost","path","includes","beforeRedirect","redirectOptions","href","isHttpAdapterSupported","process","kindOf","wrapAsync","asyncExecutor","Promise","resolve","reject","onDone","isDone","done","value","isRejected","_resolve","_reject","reason","onDoneHandler","catch","httpAdapter","dispatchHttpRequest","data","lookup","family","responseType","responseEncoding","method","toUpperCase","rejected","req","isAsyncFn","entry","isString","indexOf","isArray","TypeError","emitter","onFinished","cancelToken","unsubscribe","abort","signal","removeEventListener","removeAllListeners","emit","type","once","subscribe","aborted","addEventListener","fullPath","baseURL","url","parsed","convertedData","status","statusText","Blob","env","err","ERR_BAD_REQUEST","stripBOM","Readable","normalize","set","onDownloadProgress","onUploadProgress","maxRate","maxUploadRate","undefined","maxDownloadRate","isSpecCompliantForm","userBoundary","getContentType","formHeaders","tag","boundary","isFormData","getHeaders","hasContentLength","knownLength","promisify","getLength","call","Number","isFinite","setContentLength","e","isBlob","size","setContentType","isStream","isBuffer","isArrayBuffer","Uint8Array","length","maxBodyLength","contentLength","toFiniteNumber","getContentLength","objectMode","pipeline","noop","on","progress","Object","assign","upload","urlUsername","urlPassword","delete","pathname","search","params","paramsSerializer","replace","customErr","Error","message","exists","toJSON","agents","httpAgent","httpsAgent","isUndefined","socketPath","transport","isHttpsRequest","test","agent","maxRedirects","Infinity","insecureHTTPParser","request","handleResponse","res","destroyed","streams","responseLength","transformStream","download","push","responseStream","lastRequest","decompress","statusCode","createUnzip","offListeners","finished","response","statusMessage","responseBuffer","totalResponseBytes","handleStreamData","chunk","maxContentLength","destroy","ERR_BAD_RESPONSE","handlerStreamAborted","handleStreamError","handleStreamEnd","responseData","concat","handleRequestError","handleRequestSocket","socket","setKeepAlive","timeout","parseInt","isNaN","ERR_BAD_OPTION_VALUE","setTimeout","handleRequestTimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","ETIMEDOUT","ECONNABORTED","ended","errored","pipe","end","__setProxy"],"sources":["D:/desktop/Excellence Technology/project/reactjs/ecommerce/node_modules/axios/lib/adapters/http.js"],"sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport {getProxyForUrl} from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport {VERSION} from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport EventEmitter from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\nimport callbackify from \"../helpers/callbackify.js\";\n\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\n\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n}\n\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\n\nconst {http: httpFollow, https: httpsFollow} = followRedirects;\n\nconst isHttps = /https:?/;\n\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer\n        .from(proxy.auth, 'utf8')\n        .toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost;\n    // Replace 'host' since options is not a URL object\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\n\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n\n// temporary hotfix\n\nconst wrapAsync = (asyncExecutor) => {\n  return new Promise((resolve, reject) => {\n    let onDone;\n    let isDone;\n\n    const done = (value, isRejected) => {\n      if (isDone) return;\n      isDone = true;\n      onDone && onDone(value, isRejected);\n    }\n\n    const _resolve = (value) => {\n      done(value);\n      resolve(value);\n    };\n\n    const _reject = (reason) => {\n      done(reason, true);\n      reject(reason);\n    }\n\n    asyncExecutor(_resolve, _reject, (onDoneHandler) => (onDone = onDoneHandler)).catch(_reject);\n  })\n};\n\n/*eslint consistent-return:0*/\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {\n    let {data, lookup, family} = config;\n    const {responseType, responseEncoding} = config;\n    const method = config.method.toUpperCase();\n    let isDone;\n    let rejected = false;\n    let req;\n\n    if (lookup && utils.isAsyncFn(lookup)) {\n      lookup = callbackify(lookup, (entry) => {\n        if(utils.isString(entry)) {\n          entry = [entry, entry.indexOf('.') < 0 ? 6 : 4]\n        } else if (!utils.isArray(entry)) {\n          throw new TypeError('lookup async function must return an array [ip: string, family: number]]')\n        }\n        return entry;\n      })\n    }\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n\n    const onFinished = () => {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n\n      emitter.removeAllListeners();\n    }\n\n    onDone((value, isRejected) => {\n      isDone = true;\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n    });\n\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n\n    emitter.once('abort', reject);\n\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, 'http://localhost');\n    const protocol = parsed.protocol || supportedProtocols[0];\n\n    if (protocol === 'data:') {\n      let convertedData;\n\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError(\n        'Unsupported protocol ' + protocol,\n        AxiosError.ERR_BAD_REQUEST,\n        config\n      ));\n    }\n\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n\n    const onDownloadProgress = config.onDownloadProgress;\n    const onUploadProgress = config.onUploadProgress;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for spec compliant FormData objects\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n\n      data = formDataToStream(data, (formHeaders) => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      });\n      // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {\n        }\n      }\n    } else if (utils.isBlob(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n\n      // Add Content-Length header if data exists\n      headers.setContentLength(data.length, false);\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError(\n          'Request body larger than maxBodyLength limit',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n    }\n\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {objectMode: false});\n      }\n\n      data = stream.pipeline([data, new AxiosTransformStream({\n        length: contentLength,\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n\n      onUploadProgress && data.on('progress', progress => {\n        onUploadProgress(Object.assign(progress, {\n          upload: true\n        }));\n      });\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    auth && headers.delete('authorization');\n\n    let path;\n\n    try {\n      path = buildURL(\n        parsed.pathname + parsed.search,\n        config.params,\n        config.paramsSerializer\n      ).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n\n    headers.set(\n      'Accept-Encoding',\n      'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false\n      );\n\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth,\n      protocol,\n      family,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    // cacheable-lookup integration hotfix\n    !utils.isUndefined(lookup) && (options.lookup = lookup);\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n\n      const streams = [res];\n\n      const responseLength = +res.headers['content-length'];\n\n      if (onDownloadProgress) {\n        const transformStream = new AxiosTransformStream({\n          length: utils.toFiniteNumber(responseLength),\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n\n        onDownloadProgress && transformStream.on('progress', progress => {\n          onDownloadProgress(Object.assign(progress, {\n            download: true\n          }));\n        });\n\n        streams.push(transformStream);\n      }\n\n      // decompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n\n        switch (res.headers['content-encoding']) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'x-gzip':\n        case 'compress':\n        case 'x-compress':\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'deflate':\n          streams.push(new ZlibHeaderTransformStream());\n\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'br':\n          if (isBrotliSupported) {\n            streams.push(zlib.createBrotliDecompress(brotliOptions));\n            delete res.headers['content-encoding'];\n          }\n        }\n      }\n\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n\n          const err = new AxiosError(\n            'maxContentLength size of ' + config.maxContentLength + ' exceeded',\n            AxiosError.ERR_BAD_RESPONSE,\n            config,\n            lastRequest\n          );\n          responseStream.destroy(err);\n          reject(err);\n        });\n\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(new AxiosError(\n          'error trying to parse `config.timeout` to int',\n          AxiosError.ERR_BAD_OPTION_VALUE,\n          config,\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(\n          timeoutErrorMessage,\n          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n          config,\n          req\n        ));\n        abort();\n      });\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n\n      data.on('end', () => {\n        ended = true;\n      });\n\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n}\n\nexport const __setProxy = setProxy;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}